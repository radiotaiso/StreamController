name: RPM Autobuild (Simple)

on:
  schedule:
    - cron: '0 2 20 * *' # Runs monthly on the 20th at 2 AM UTC
  workflow_dispatch:

jobs:
  build-rpm:
    runs-on: ubuntu-latest
    container: fedora:latest

    steps:
      - name: Install System Dependencies
        run: dnf install -y git gh rpm-build desktop-file-utils python3-devel python3-pip python3-setuptools python3-wheel make cairo-devel cairo-gobject-devel gobject-introspection-devel gcc gcc-c++ dbus-devel dbus-x11 rsync hicolor-icon-theme

      - name: Checkout RPM build files (main branch)
        uses: actions/checkout@v4
        with:
          ref: 'main'
          path: 'rpmfiles'

      - name: Get latest upstream tag
        id: get_tag
        run: |
          git ls-remote --tags https://github.com/StreamController/StreamController.git | awk '{print $2}' | grep -E '^refs/tags/[0-9]' | sed 's|refs/tags/||' | sort -V | tail -n1 > latest_tag.txt
          TAG=$(cat latest_tag.txt)
          echo "Latest tag: $TAG"
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Download upstream source (latest tag)
        uses: actions/checkout@v4
        with:
          repository: 'StreamController/StreamController'
          ref: ${{ steps.get_tag.outputs.tag }}
          path: 'upstreamsrc'

      - name: Prepare build directory
        run: |
          mkdir -p buildroot
          rsync -a upstreamsrc/ buildroot/
          rsync -a rpmfiles/rpm/ buildroot/rpm/

      - name: Set RPM version to match tag (strip hyphens)
        run: |
          TAG=${{ steps.get_tag.outputs.tag }}
          RPM_VERSION=$(echo "$TAG" | tr -d '-')
          sed -i "s/^Version:.*/Version:        $RPM_VERSION/" buildroot/rpm/StreamController.spec

      - name: Install Python Dependencies
        run: |
          cd buildroot
          pip3 install -r requirements.txt

      - name: Build RPM
        run: |
          cd buildroot/rpm
          make rpm

      - name: Create Temporary Build Branch
        run: |
          cd buildroot
          rm -rf .git
          git init
          git config user.name "GitHub Botcho"
          git config user.email "actions@github.com"
          git checkout -b rpm-autobuild-tmp
          git add .
          git commit -m "Automated RPM build for version ${{ steps.get_tag.outputs.tag }}"
          git remote add origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          git push --force origin rpm-autobuild-tmp

      - name: Create Release with gh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG=${{ steps.get_tag.outputs.tag }}
          RPM_VERSION=$(echo "$TAG" | tr -d '-')
          NOTES_FILE=$(mktemp)
          echo "Automated release based on upstream tag $TAG." > "$NOTES_FILE"
          echo "Built from tag with local RPM files." >> "$NOTES_FILE"
          echo "" >> "$NOTES_FILE"
          echo "Upstream release: https://github.com/StreamController/StreamController/releases/tag/$TAG" >> "$NOTES_FILE"
          gh release view $RPM_VERSION --repo ${{ github.repository }} || \
            gh release create $RPM_VERSION \
              --repo ${{ github.repository }} \
              --title "Release $RPM_VERSION" \
              --notes-file "$NOTES_FILE"

      - name: Upload RPM Asset with gh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG=${{ steps.get_tag.outputs.tag }}
          RPM_VERSION=$(echo "$TAG" | tr -d '-')
          gh release upload $RPM_VERSION /github/home/rpmbuild/RPMS/x86_64/streamcontroller-${RPM_VERSION}-1.fc42.x86_64.rpm --clobber --repo ${{ github.repository }}

      - name: Cleanup Temporary Branch
        run: |
          git push origin --delete rpm-autobuild-tmp || true
